// <auto-generated />
using System;
using KazalisteFranic.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KazalisteFranic.DAL.Migrations
{
    [DbContext(typeof(KazalisteManagerDbContext))]
    [Migration("20200604123357_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KazalisteFranic.Model.Akademija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Grad");

                    b.Property<string>("Naziv");

                    b.HasKey("Id");

                    b.ToTable("Akademije");

                    b.HasData(
                        new { Id = 1, Grad = "Zagreb", Naziv = "Akademija Dramske Umjetnosti u Zagrebu" },
                        new { Id = 2, Grad = "Split", Naziv = "Akademija Dramske Umjetnosti u Splitu" },
                        new { Id = 3, Grad = "Rijeka", Naziv = "Libertas" },
                        new { Id = 4, Grad = "Osijek", Naziv = "Akademija za umjetnost i kulturu" }
                    );
                });

            modelBuilder.Entity("KazalisteFranic.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("KazalisteFranic.Model.Glumac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AkademijaId");

                    b.Property<string>("Citat")
                        .IsRequired();

                    b.Property<string>("Ime")
                        .IsRequired();

                    b.Property<string>("Prezime")
                        .IsRequired();

                    b.Property<string>("Spol")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.HasKey("Id");

                    b.HasIndex("AkademijaId");

                    b.ToTable("Glumci");

                    b.HasData(
                        new { Id = 1, AkademijaId = 1, Citat = "Nije ti ovo Diznilend", Ime = "Karlo", Prezime = "Franić", Spol = "M" }
                    );
                });

            modelBuilder.Entity("KazalisteFranic.Model.GlumacPredstava", b =>
                {
                    b.Property<int>("GlumacId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GlumacId1");

                    b.Property<int>("PredstavaId");

                    b.HasKey("GlumacId");

                    b.HasIndex("GlumacId1");

                    b.HasIndex("PredstavaId");

                    b.ToTable("GlumacPredstave");
                });

            modelBuilder.Entity("KazalisteFranic.Model.Predstava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cijena");

                    b.Property<DateTime>("Datum");

                    b.Property<string>("Naslov")
                        .IsRequired();

                    b.Property<int>("RedateljId");

                    b.Property<string>("Sadrzaj")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RedateljId");

                    b.ToTable("Predstave");
                });

            modelBuilder.Entity("KazalisteFranic.Model.Redatelj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AkademijaId");

                    b.Property<string>("Ime");

                    b.Property<string>("Prezime");

                    b.Property<string>("Spol")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.HasKey("Id");

                    b.HasIndex("AkademijaId");

                    b.ToTable("Redatelji");

                    b.HasData(
                        new { Id = 1, AkademijaId = 1, Ime = "Martin", Prezime = "Scorsese", Spol = "M" },
                        new { Id = 2, AkademijaId = 1, Ime = "Rene", Prezime = "Medvešek", Spol = "M" },
                        new { Id = 3, AkademijaId = 4, Ime = "Saša", Prezime = "Anočić", Spol = "M" },
                        new { Id = 4, AkademijaId = 3, Ime = "Dana", Prezime = "Budisavljević", Spol = "Ž" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KazalisteFranic.Model.Glumac", b =>
                {
                    b.HasOne("KazalisteFranic.Model.Akademija", "Diplomirao")
                        .WithMany("Glumci")
                        .HasForeignKey("AkademijaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KazalisteFranic.Model.GlumacPredstava", b =>
                {
                    b.HasOne("KazalisteFranic.Model.Glumac", "Glumac")
                        .WithMany("GlumacPredstave")
                        .HasForeignKey("GlumacId1");

                    b.HasOne("KazalisteFranic.Model.Predstava", "Predstava")
                        .WithMany("GlumacPredstave")
                        .HasForeignKey("PredstavaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KazalisteFranic.Model.Predstava", b =>
                {
                    b.HasOne("KazalisteFranic.Model.Redatelj", "Redatelj")
                        .WithMany("Predstave")
                        .HasForeignKey("RedateljId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KazalisteFranic.Model.Redatelj", b =>
                {
                    b.HasOne("KazalisteFranic.Model.Akademija", "Diplomirao")
                        .WithMany("Redatelji")
                        .HasForeignKey("AkademijaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KazalisteFranic.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KazalisteFranic.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KazalisteFranic.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KazalisteFranic.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
